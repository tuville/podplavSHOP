from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from config import dp, bot
from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Text
from data_base import db_script
from keyboard import kb_admin, kb_menu_main
from keyboard.kb_admin import kb_menu_admin
from keyboard.kb_menu_main import kb_menu_user
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, MediaGroup
from handlers import user_handler_md

ID = [892004718, 1022760278] #–º–æ–π

class FSMAdmin(StatesGroup):
    photo1 = State()
    photo2 = State()
    photo3 = State()
    photo4 = State()
    name = State()
    description = State()
    price = State()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def check_root_admin (message: types.Message):
    if message.from_user.id in ID:
        await bot.send_message(message.from_user.id, f"–ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ, <b>–±–∞—Ä–æ–Ω {message.from_user.first_name}?</b> ü§† ü§† ü§†", reply_markup=kb_menu_admin)
    else:
        await bot.send_message(message.from_user.id, f"üëÆ‚Äç Ô∏èüëÆ‚Äç Ô∏èüëÆ‚Äç Ô∏è–ö–ê–†–ê–£–õ!!! Ô∏èüëÆ‚Äç Ô∏èüëÆ‚Äç Ô∏èüëÆ‚Äç\n{message.from_user.first_name}, "
                                                     f"—É –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é!!!"
                                                     f"", reply_markup=kb_menu_user)

# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
async def start_load_catalog(message: types.Message):
    if message.from_user.id in ID:
        await FSMAdmin.photo1.set()
        await message.answer("1Ô∏è‚É£ <b>–®–∞–≥ 1.</b> –ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é #1 —Ç–æ–≤–∞—Ä–∞")
    else:
        await bot.send_message(message.from_user.id, f"üëÆ‚Äç Ô∏èüëÆ‚Äç Ô∏èüëÆ‚Äç Ô∏è–ö–ê–†–ê–£–õ!!! Ô∏èüëÆ‚Äç Ô∏èüëÆ‚Äç Ô∏èüëÆ‚Äç\n{message.from_user.first_name}, "
                                                     f"—É –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é!!!"
                                                     f"", reply_markup=kb_menu_user)

# –û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
async def cancel_load (message: types.Message, state = FSMContext):
    if message.from_user.id in ID:
        current_state = await state.get_state()
        if current_state is None:
            return
        await state.finish()
        await message.answer("‚ùå ‚ùå ‚ùå <b>–ó–∞–≥—Ä—É–∑–∫–∞ –û–¢–ú–ï–ù–ï–ù–ê!</b> ‚ùå ‚ùå ‚ùå", reply_markup=kb_menu_user)

async def load_photo1(message: types.Message, state: FSMContext):
    if message.from_user.id in ID:
        async with state.proxy() as data:
            data['photo1'] = message.photo[0].file_id
        await FSMAdmin.next()
        await message.answer("–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é #2 —Ç–æ–≤–∞—Ä–∞")

async def load_photo2(message: types.Message, state: FSMContext):
    if message.from_user.id in ID:
        async with state.proxy() as data:
            data['photo2'] = message.photo[0].file_id
        await FSMAdmin.next()
        await message.answer("–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é #3 —Ç–æ–≤–∞—Ä–∞")

async def load_photo3(message: types.Message, state: FSMContext):
    if message.from_user.id in ID:
        async with state.proxy() as data:
            data['photo3'] = message.photo[0].file_id
        await FSMAdmin.next()
        await message.answer("–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é #4 —Ç–æ–≤–∞—Ä–∞")

async def load_photo4(message: types.Message, state: FSMContext):
    if message.from_user.id in ID:
        async with state.proxy() as data:
            data['photo5'] = message.photo[0].file_id
        await FSMAdmin.next()
        await message.answer("2Ô∏è‚É£ <b>–®–∞–≥ 2.</b> –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

# –ó–∞–≥—Ä—É–∑–∏–ª–∏ —Ñ–æ—Ç–æ, –ª–æ–≤–∏–º –≤—Ç–æ—Ä–æ–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
async def load_name (message: types.Message, state: FSMContext):
    if message.from_user.id in ID:
        async with state.proxy() as data:
            data['name'] = message.text
        await FSMAdmin.next()
        await message.answer("3Ô∏è‚É£ <b>–®–∞–≥ 3.</b> –ù–∞–ø–∏—à–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

# –ó–∞–ø–∏—Å–∞–ª–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –ª–æ–≤–∏–º —Ç—Ä–µ—Ç–∏–π –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async def load_description (message: types.Message, state: FSMContext):
    if message.from_user.id in ID:
        async with state.proxy() as data:
            data['description'] = message.text
        await FSMAdmin.next()
        await message.answer("4Ô∏è‚É£ <b>–®–∞–≥ 4.</b> –ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞")

# –ó–∞–ø–∏—Å–∞–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ, –ª–æ–≤–∏–º —á–µ—Ç–≤–µ—Ä—Ç—ã–π –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ü–µ–Ω—É
async def load_price (message: types.Message, state: FSMContext):
    if message.from_user.id in ID:
        async with state.proxy() as data:
            data['price'] = float(message.text)
        await db_script.sqlDB_catalogRB_add(state)
        await state.finish()
        await message.answer("‚úÖ ‚úÖ ‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω! ü•≥ ü•≥ ü•≥")

@dp.callback_query_handler(lambda x: x.data and x.data.startswith('del '))
async def del_callback_run (callback_query: types.CallbackQuery):
    await db_script.sqlDB_catalogRB_delete_command(callback_query.data.replace('del ', ''))
    await callback_query.answer(text=f'{callback_query.data.replace("del ", "")} —É–¥–∞–ª–µ–Ω–∞', show_alert=True)

async def delete_item(message: types.Message):
    if message.from_user.id in ID:
        read = await db_script.sqlDB_catalogRB_read_to_delete()
        for ret in read:
            await message.answer(f'{ret[4]}\n'
                                 f'–¶–µ–Ω–∞: {ret[-1]}', reply_markup=InlineKeyboardMarkup().\
                    add(InlineKeyboardButton(f"–£–¥–∞–ª–∏—Ç—å {ret[4]}", callback_data=f'del {ret[4]}')))
    else:
        await message.answer(f"üëÆ‚Äç Ô∏èüëÆ‚Äç Ô∏èüëÆ‚Äç Ô∏è–ö–ê–†–ê–£–õ!!! Ô∏èüëÆ‚Äç Ô∏èüëÆ‚Äç Ô∏èüëÆ‚Äç\n{message.from_user.first_name}, "
                            f"—É –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é!!!", reply_markup=kb_menu_user)

async def buttonAdmin_catalog(message: types.Message):
    await user_handler_md.button_catalog(message)

async def backMainMenu(message: types.Message):
    await user_handler_md.button_main_menu(message)

def register_handlers_admin (dp: Dispatcher):
    dp.register_message_handler(check_root_admin, commands=['admin'])
    dp.register_message_handler(start_load_catalog, Text(equals=kb_admin.load_name_btn, ignore_case=True))
    dp.register_message_handler(cancel_load,Text(equals=kb_admin.cancel_name_btn, ignore_case=True), state="*")
    dp.register_message_handler(load_photo1, content_types=['photo'], state=FSMAdmin.photo1)
    dp.register_message_handler(load_photo2, content_types=['photo'], state=FSMAdmin.photo2)
    dp.register_message_handler(load_photo3, content_types=['photo'], state=FSMAdmin.photo3)
    dp.register_message_handler(load_photo4, content_types=['photo'], state=FSMAdmin.photo4)
    dp.register_message_handler(load_name, state=FSMAdmin.name)
    dp.register_message_handler(load_description, state=FSMAdmin.description)
    dp.register_message_handler(load_price, state=FSMAdmin.price)
    dp.register_message_handler(delete_item, Text(equals=kb_admin.delete_name_btn, ignore_case=True))
    dp.register_message_handler(buttonAdmin_catalog, Text (equals=kb_menu_main.catalog_name_btn, ignore_case=True))
    dp.register_message_handler(backMainMenu, Text(equals=kb_menu_main.menu_name_btn, ignore_case=True))